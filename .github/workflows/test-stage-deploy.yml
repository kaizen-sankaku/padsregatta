name: Build, Push and Deploy Node.js app

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: ['test-dev-deploy']
  pull_request:
    branches: ['test-dev-deploy']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: padsregatta-dev

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      contents: read
      packages: write

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DO_DROPLET_IP_ADD }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME, CONTAINER_NAME, REGISTRY, ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}, GITHUB_SHA
          script: |
            docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
            docker pull ghcr.io/$(echo $IMAGE_NAME):test-dev-deploy
            docker stop $(echo $CONTAINER_NAME)
            docker rm $(echo $CONTAINER_NAME)
            docker run -d \
            --restart always \
            --name $(echo $CONTAINER_NAME) \
            -p 80:8080 \
            ghcr.io/$(echo $IMAGE_NAME):test-dev-deploy

      # - name: Log in to the Container registry
      #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       echo $(echo $REGISTRY)/$(echo $IMAGE_NAME) $(echo $GITHUB_SHA)
      #       echo ${{ env.REGISTRY }}/$(echo $IMAGE_NAME)
      #       docker pull ghcr.io/$(echo $IMAGE_NAME):test-dev-deploy

      # - name: Continue Deployment to Digital Ocean
      #   run: |
      #       echo $(echo $REGISTRY)/$(echo $IMAGE_NAME) $(echo $GITHUB_SHA)
      #       docker pull ghcr.io/$(echo $IMAGE_NAME):test-dev-deploy
      #       docker run -d \
      #       --restart always \
      #       --name $(echo $IMAGE_NAME) \
      #       $(echo $IMAGE_NAME)

# docker rm $(echo $IMAGE_NAME)
# docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
# echo $(echo $IMAGE_NAME) $(echo $REGISTRY) $(echo $GITHUB_SHA)
# docker rm $(echo $IMAGE_NAME)
# docker run -d \
# --restart always \
# --name $(echo $IMAGE_NAME) \
# $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

# Remove old container
# Run a new container from a new image
